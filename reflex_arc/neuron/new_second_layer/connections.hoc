objref connect_inh_inh, connect_ex_ex, connect_ex_inh, connect_inh_ex
objref connect_ip_ex, connect_ex_ees, connect_ip_ees

objref syn, target, stdp, presyn, postsyn, stdpmech, presyns, postsyns

objref connect_MNe_Aff, connect_MNe_IA, connect_MNe_Ib
objref connect_IAe_Ia, connect_Ibe_Ia, connect_sens1_EES
objref connect_IP0_sens1, connect_IP0_MNe, connect_IP0_IAe
objref connect_MNe_RCe, connect_IAe_RCe, connect_RCe_MNe

connect_MNe_Aff = new List()
connect_MNe_Ib = new List()
connect_MNe_IA = new List()
connect_IAe_Ia = new List()
connect_Ibe_Ia = new List()
connect_sens1_EES = new List()
connect_IP0_sens1 = new List()
connect_IP0_MNe = new List()
connect_IP0_IAe = new List()
connect_MNe_RCe = new List()
connect_IAe_RCe = new List()
connect_RCe_MNe = new List()

connect_inh_inh = new List()
connect_ex_ex = new List()
connect_ex_inh = new List()
connect_inh_ex = new List()
connect_ip_ex = new List()
connect_ex_ees = new List()
connect_ip_ees = new List()

presyns = new List()
postsyns = new List()
stdpmech = new List()


proc connection(){
    syn = $o1
    nc = pc.gid_connect($3, syn)
    r.uniform(1, 2)
    nc.weight = r.repick()
    r.uniform(1, 2)
    nc.delay = r.repick()
    $o2.append(nc)
}

proc connectionSTDP(){
    r.uniform(0.04, 0.07)
    syn = $o1
    nc = pc.gid_connect($4, syn)
    nc.weight = r.repick()
    r.uniform(1, 2)
    nc.delay = $9
    stdp = new StdwaSA(0.5)
    $o2.append(nc)
    if($8 == 1){
        r.uniform(0.0001, 0.0004)
        nc.weight = 0.0004 //r.repick()
        //nc.delay = 2
    }else if($8 == 2){
        nc.weight = 0.05
        nc.delay = 2
    }else if($8 == 3){
        r.uniform(0.00005, 0.00035)
        nc.weight = 0.00035 //r.repick()
        if($3 > 3*ncell && $3 < 4*ncell){
            nc.weight = 0.0003501
        }
    }else if($8 == 4){
        stdp.aLTD = -0.001//inhibitory
        nc.weight = 0.4 //0.08
    }else if($8 == 5){
        r.uniform(0.5, 0.8)
        nc.weight = r.repick()
    }else{nc.weight = 0.04}
    presyn = pc.gid_connect($4, stdp)
    presyn.weight = 1
    postsyn = pc.gid_connect($3, stdp)
    postsyn.weight = -1
    setpointer stdp.wsyn, $o2.object($o2.count-1).weight
    $o5.append(stdp)
    $o6.append(presyn)
    $o7.append(postsyn)
}

//connection excitatory
for i=pc.id, 32*ncell-1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*27-1 {
        r.uniform(0, nSens)
        if (i < ncell){
            connection(target.synlistees.object(j), connect_ex_ex, (ncell*32+nIP+nMN+nAff+2*nInt+nRC+r.repick())) //add ees
        } 
        r.uniform(1, 1.5)
        if (i >= ncell && i < ncell*6){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i - ncell), stdpmech, presyns, postsyns, 1, 1)
            connectionSTDP(target.synlistees.object(j), connect_ex_ex, i, (i + 5*ncell), stdpmech, presyns, postsyns, 3, 1)
            connectionSTDP(target.synlistees.object(j), connect_ex_inh, i, (i + 10*ncell), stdpmech, presyns, postsyns, 3, 1)
        }
        
        if (i >= ncell*6 && i < ncell*11){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i + 5*ncell), stdpmech, presyns, postsyns, 2, 1)
            connectionSTDP(target.synlistees.object(j), connect_ex_ex, i, (i - 6*ncell), stdpmech, presyns, postsyns, 0, 1)
            connectionSTDP(target.synlistinh.object(j), connect_ex_ex, i, (i - 5*ncell), stdpmech, presyns, postsyns, 0, 2)
        }
            //ra.uniform(ncell*2, ncell*3)
        if (i >= ncell*11 && i < ncell*16){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i - 5*ncell), stdpmech, presyns, postsyns, 2, 1)
            connectionSTDP(target.synlistinh.object(j), connect_ex_ex, i, (i - 10*ncell), stdpmech, presyns, postsyns, 0, 2)
        }
        r.uniform(0, ncell)
        if (i >= ncell*16 && i < ncell*22){
            //print(int((i/ncell-16))*ncell + int(r.repick()))
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-16*ncell), stdpmech, presyns, postsyns, 0, 3)
        }
        if (i >= ncell*22 && i < ncell*28){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-ncell*6), stdpmech, presyns, postsyns, 0, 1)
        }
        if (i >= ncell*28 && i < ncell*32){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-ncell*5), stdpmech, presyns, postsyns, 0, 1)
        }
        if (i >= ncell*30 && i < ncell*32 || i >= ncell*25 && i < ncell*27 || i >= ncell*19 && i < ncell*32){
            r.uniform(ncell*5, ncell*6)
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 4, 1)
        }
        if (i >= ncell*29 && i < ncell*30 || i >= ncell*24 && i < ncell*25 || i >= ncell*18 && i < ncell*19){
            r.uniform(ncell*4, ncell*5)
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 4, 1)
            r.uniform(ncell*3, ncell*4)
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 4, 1)
        }
        if (i >= ncell*28 && i < ncell*29 || i >= ncell*23 && i < ncell*24 || i >= ncell*17 && i < ncell*18){
            r.uniform(ncell*3, ncell*4)
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 4, 1)
            r.uniform(ncell*2, ncell*3)
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 4, 1)
        }
        if (i >= ncell*22 && i < ncell*23 || i >= ncell*16 && i < ncell*17){
            r.uniform(ncell*2, ncell*3)
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 4, 1)
            r.uniform(ncell, ncell*2)
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 4, 1)
        }
    }
}

//connection IP
for i=pc.id+32*ncell, ncell*32+nIP -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*40-1 {
        if((i-32*ncell) < 10){
            r.uniform(ncell*16, ncell*17)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        if((i-32*ncell) > 10 && (i-32*ncell) < 20){
            r.uniform(ncell*22, ncell*23)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        if((i-32*ncell) > 20 && (i-32*ncell) < 30){
            r.uniform(ncell*17, ncell*18)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }   
        if((i-32*ncell) > 30 && (i-32*ncell) < 35){
            r.uniform(ncell*23, ncell*24)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        if((i-32*ncell) > 35 && (i-32*ncell) < 40){
            r.uniform(ncell*28, ncell*29)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        if((i-32*ncell) > 40 && (i-32*ncell) < 50){
            r.uniform(ncell*18, ncell*19)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }        
        if((i-32*ncell) > 50 && (i-32*ncell) < 60){
            r.uniform(ncell*24, ncell*25)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 2)
        }
        if((i-32*ncell) > 60 && (i-32*ncell) < 70){
            r.uniform(ncell*29, ncell*30)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 2)
        }
        if((i-32*ncell) > 75 && (i-32*ncell) < 80){
            r.uniform(ncell*19, ncell*20)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }       
        if((i-32*ncell) > 70 && (i-32*ncell) < 75){
            r.uniform(ncell*25, ncell*26)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        //if((i-32*ncell) > 75 && (i-32*ncell) < 80){
        //    r.uniform(ncell*30, ncell*31)
        //    connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        //}
        if((i-32*ncell) > 80 && (i-32*ncell) < 90){
            r.uniform(ncell*20, ncell*32)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        if((i-32*ncell) > 90 && (i-32*ncell) < 95){
            r.uniform(ncell*26, ncell*27)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        if((i-32*ncell) > 95 && (i-32*ncell) < 100){
            r.uniform(ncell*31, ncell*32)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        if((i-32*ncell) > 100 && (i-32*ncell) < 110){
            r.uniform(ncell*32, ncell*22)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        if((i-32*ncell) > 110 && (i-32*ncell) < 120){
            r.uniform(ncell*27, ncell*28)
            connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }

        //r.uniform(0, nSens)
        //connection(target.synlistex.object(j), connect_ip_ees, (ncell*32+nIP+nMN+nAff+2*nInt+nRC+r.repick()))
    }
}

//connection MNE
for i=pc.id+ncell*32+nIP, ncell*32+nIP+nMN -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*5-1 {
        if(i%3 == 0){
            r.uniform(0, 10)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(10, 20)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(20, 30)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(30, 35)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(35, 40)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(40, 50)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(50, 60)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(60, 70)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(75, 80)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(70, 75)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            //r.uniform(75, 80)
            //connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(80, 90)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(90, 95)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(95, 100)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(100, 110)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
            r.uniform(110, nIP)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 5, 1)
        
        }
        if(j%3 == 0){
            r.uniform(0, nAff)
            connectionSTDP(target.synlistaff.object(j), connect_MNe_Aff, i, (ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens+r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }//r.uniform(0, nInt)
        //connectionSTDP(target.synlistinh.object(j), connect_MNe_IA, i, (ncell*32+nIP+nMN+nAff + r.repick()), stdpmech, presyns, postsyns, 0, 1)        
        //r.uniform(0, nInt)
        //connectionSTDP(target.synlistex.object(j), connect_MNe_Ib, i, (ncell*32+nIP+nMN+nAff+nInt + r.repick()), stdpmech, presyns, postsyns, 0, 1)        
        //r.uniform(0, nRC)
        //connectionSTDP(target.synlistrc.object(j), connect_MNe_RCe, i, (ncell*32+nIP+nMN+nAff+2*nInt + r.repick()), stdpmech, presyns, postsyns, 0, 1)              
    
    }
}

//connection IaE
for i=pc.id+ncell*32+nIP+nMN+nAff, ncell*32+nIP+nMN+nAff+nInt -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nIP)
        connectionSTDP(target.synlistip.object(j), connect_IP0_IAe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(0, nAff)
        connectionSTDP(target.synlistaff.object(j), connect_IAe_Ia, i, (ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens + r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(0, nRC)
        connectionSTDP(target.synlistrc.object(j), connect_IAe_RCe, i, (ncell*32+nIP+nMN+nAff+2*nInt + r.repick()), stdpmech, presyns, postsyns, 0, 1)              
    
                
    }
}

//connection IbE
for i=pc.id+ncell*32+nIP+nMN+nAff+nInt, ncell*32+nIP+nMN+nAff+2*nInt -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nAff)
        connectionSTDP(target.synlistaff.object(j), connect_Ibe_Ia, i, (ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens + r.repick()), stdpmech, presyns, postsyns, 0, 1)
    }
}

//connection RCE
for i=pc.id+ncell*32+nIP+nMN+nAff+2*nInt, ncell*32+nIP+nMN+nAff+2*nInt+nRC -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nMN)
        connectionSTDP(target.synlistmn.object(j), connect_RCe_MNe, i, (ncell*32+nIP+r.repick()), stdpmech, presyns, postsyns, 0, 1)
    
    }
}

//connection Ia Afferent
for i=pc.id+ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens, ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens+nAff -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nAff)
        if(i%2 == 0){connection(target.synlistsens.object(j), connect_sens1_EES, ncells)}
        if(i%11 == 0){connection(target.synlistgen.object(j), connect_sens1_EES, (ncell*32+nIP+nMN + r.repick()))}
    }
}


//connection sens
for i=pc.id+ncell*32+nIP+nMN+nAff+2*nInt+nRC, ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        connection(target.synlistsens.object(j), connect_sens1_EES, ncells)
        //if(i%30 == 0, 1){connection(target.synlistgen.object(j), connect_sens1_EES, ncells+1)}
    }
}