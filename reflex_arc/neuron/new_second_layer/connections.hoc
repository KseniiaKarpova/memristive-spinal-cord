objref connect_inh_inh, connect_ex_ex, connect_ex_inh, connect_inh_ex
objref connect_ip_ex, connect_ex_ees, connect_ip_ees

objref syn, target, stdp, presyn, postsyn, stdpmech, presyns, postsyns

objref connect_MNe_Aff, connect_MNe_IA, connect_MNe_Ib
objref connect_IAe_Ia, connect_Ibe_Ia, connect_sens1_EES
objref connect_IP0_sens1, connect_IP0_MNe, connect_IP0_IAe
objref connect_MNe_RCe, connect_IAe_RCe, connect_RCe_MNe

connect_MNe_Aff = new List()
connect_MNe_Ib = new List()
connect_MNe_IA = new List()
connect_IAe_Ia = new List()
connect_Ibe_Ia = new List()
connect_sens1_EES = new List()
connect_IP0_sens1 = new List()
connect_IP0_MNe = new List()
connect_IP0_IAe = new List()
connect_MNe_RCe = new List()
connect_IAe_RCe = new List()
connect_RCe_MNe = new List()

connect_inh_inh = new List()
connect_ex_ex = new List()
connect_ex_inh = new List()
connect_inh_ex = new List()
connect_ip_ex = new List()
connect_ex_ees = new List()
connect_ip_ees = new List()

presyns = new List()
postsyns = new List()
stdpmech = new List()


proc connection(){
    syn = $o1
    nc = pc.gid_connect($3, syn)
	r.uniform(1, 2)
    nc.weight = r.repick()
    r.uniform(1, 2)
    nc.delay = r.repick()
    $o2.append(nc)
}

proc connectionSTDP(){
	r.uniform(0.01, 0.02)
    syn = $o1
    nc = pc.gid_connect($4, syn)
    nc.weight = r.repick()
    //r.uniform(1, 2)
    nc.delay = $9
    stdp = new StdwaSA(0.5)
    $o2.append(nc)
    if($8 == 1){
        stdp.aLTD = -0.001//inhibitory
        r.uniform(0.05, 0.08)
        nc.weight = r.repick()
        //nc.delay = 2
    }else if($8 == 2){
        r.uniform(0.00015, 0.00025)
        nc.weight = r.repick()
        //if($3 == 30){
        //   print($3)
        //   print(nc.weight) 
        //}
    }else if($8 == 3){
        r.uniform(0.00015, 0.0002)
        nc.weight = r.repick() 
        //if($3 == 30){
        //   print($3)
        //   print(nc.weight) 
        //}
    }else if($8 == 4){
        r.uniform(0.001, 0.01)
        nc.weight = r.repick() 
        //if($3 == 30){
        //   print($3)
        //   print(nc.weight) 
        //}
    }else{nc.weight = 0.04}
    presyn = pc.gid_connect($4, stdp)
    presyn.weight = 1
    postsyn = pc.gid_connect($3, stdp)
    postsyn.weight = -1
    setpointer stdp.wsyn, $o2.object($o2.count-1).weight
    $o5.append(stdp)
    $o6.append(presyn)
    $o7.append(postsyn)
}

//connection excitatory
for i=pc.id, 32*ncell-1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*22-1 {
        r.uniform(0, nSens)
    	if (i < ncell){
            connection(target.synlistees.object(j), connect_ex_ees, (ncell*32+nIP+nMN+r.repick())) //add ees
            //connectionSTDP(target.synlistinh.object(j), connect_ex_ex, i, (i+120, 1), stdpmech, presyns, postsyns, 0, 1)
        } 
    	if (i >= ncell && i < ncell*6){
    		connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i - ncell), stdpmech, presyns, postsyns, 2, 1)
            connectionSTDP(target.synlistees.object(j), connect_ex_ex, i, (i + 5*ncell), stdpmech, presyns, postsyns, 3, 1)
            connectionSTDP(target.synlistees.object(j), connect_ex_inh, i, (i + 10*ncell), stdpmech, presyns, postsyns, 3, 1)
            //connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (i+1), stdpmech, presyns, postsyns, 2, 1)
            //connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (i+ncell), stdpmech, presyns, postsyns, 2, 1)
        }
        //if (i >= ncell && i < ncell*2){
        //    connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (i+1), stdpmech, presyns, postsyns, 2, 1)        }
        if (i >= ncell*6 && i < ncell*11){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i + 5*ncell), stdpmech, presyns, postsyns, 0, 2)
            connectionSTDP(target.synlistees.object(j), connect_ex_ex, i, (i - 6*ncell), stdpmech, presyns, postsyns, 0, 1)
            connectionSTDP(target.synlistinh.object(j), connect_ex_ex, i, (i - 5*ncell), stdpmech, presyns, postsyns, 2, 1)
        }
        if (i >= ncell*11 && i < ncell*16){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-5*ncell), stdpmech, presyns, postsyns, 0, 2)
            connectionSTDP(target.synlistinh.object(j), connect_ex_ex, i, (i - 10*ncell), stdpmech, presyns, postsyns, 2, 1)
        }
        r.uniform(0, ncell)
    	if (i >= ncell*16 && i < ncell*22){
            print(int((i/ncell-16))*ncell + int(r.repick()))
    		connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (int((i/ncell-16))*ncell + int(r.repick())), stdpmech, presyns, postsyns, 0, 3)
    	}
        if (i >= ncell*22 && i < ncell*28){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-ncell*6), stdpmech, presyns, postsyns, 0, 1)
        }
        if (i >= ncell*28 && i < ncell*32){
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-ncell*5), stdpmech, presyns, postsyns, 0, 1)
        }
        r.uniform(ncell*5, ncell*6)
        if (i >= ncell*30 && i < ncell*32 || i >= ncell*25 && i < ncell*27 || i >= ncell*19 && i < ncell*21){
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 1, 1)
        }
        r.uniform(ncell*4, ncell*5)
        if (i >= ncell*29 && i < ncell*30 || i >= ncell*24 && i < ncell*25 || i >= ncell*18 && i < ncell*19){
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 1, 1)
        }
        r.uniform(ncell*3, ncell*4)
        if (i >= ncell*28 && i < ncell*29 || i >= ncell*23 && i < ncell*24 || i >= ncell*17 && i < ncell*18){
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 1, 1)
            //r.uniform(ncell*2, ncell*3)
            //connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 1, 1)
        }
        r.uniform(ncell*2, ncell*3)
        if (i >= ncell*22 && i < ncell*23 || i >= ncell*16 && i < ncell*17){
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 1, 1)
            r.uniform(ncell, ncell*2)
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (r.repick()), stdpmech, presyns, postsyns, 1, 1)
        }
	}
}

//connection IP
for i=pc.id+32*ncell, ncell*32+nIP -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*5-1 {
        r.uniform(ncell*16, ncell*17)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 4, 1)
        r.uniform(ncell*17, ncell*18)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*18, ncell*19)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*19, ncell*20)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*20, ncell*21)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*21, ncell*22)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*22, ncell*23)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*23, ncell*24)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*24, ncell*25)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*25, ncell*26)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*26, ncell*27)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(ncell*27, ncell*28)
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (r.repick()), stdpmech, presyns, postsyns, 0, 1)
     
        //r.uniform(0, nSens)
        //connection(target.synlistex.object(j), connect_ip_ees, (ncell*21+nIP+nMN+nAff+2*nInt+nRC+r.repick()))
    }
}

//connection MNE
for i=pc.id+ncell*32+nIP, ncell*32+nIP+nMN -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        if(j%10 == 0){
            r.uniform(0, nIP)
            connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (32*ncell + r.repick()), stdpmech, presyns, postsyns, 0, 1)
        }
        r.uniform(0, nSens)
        connectionSTDP(target.synlistaff.object(j), connect_MNe_Aff, i, (ncell*32+nIP+nMN+r.repick()), stdpmech, presyns, postsyns, 0, 1)
        //r.uniform(0, nInt)
        //connectionSTDP(target.synlistinh.object(j), connect_MNe_IA, i, (ncell*21+nIP+nMN+nAff + r.repick()), stdpmech, presyns, postsyns, 1, 1)        
        //r.uniform(0, nInt)
        //connectionSTDP(target.synlistex.object(j), connect_MNe_Ib, i, (ncell*21+nIP+nMN+nAff+nInt + r.repick()), stdpmech, presyns, postsyns, 1, 1)        
        //r.uniform(0, nRC)
        //connectionSTDP(target.synlistrc.object(j), connect_MNe_RCe, i, (ncell*21+nIP+nMN+nAff+2*nInt + r.repick()), stdpmech, presyns, postsyns, 1, 1)              
    
    }
}
/*
//connection IaE
for i=pc.id+ncell*21+nIP+nMN+nAff, ncell*21+nIP+nMN+nAff+nInt -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nIP)
        connectionSTDP(target.synlistip.object(j), connect_IP0_IAe, i, (21*ncell + r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(0, nAff)
        connectionSTDP(target.synlistaff.object(j), connect_IAe_Ia, i, (ncell*21+nIP+nMN+nAff+2*nInt+nRC+nSens + r.repick()), stdpmech, presyns, postsyns, 0, 1)
        r.uniform(0, nRC)
        connectionSTDP(target.synlistrc.object(j), connect_IAe_RCe, i, (ncell*21+nIP+nMN+nAff+2*nInt + r.repick()), stdpmech, presyns, postsyns, 1, 1)              
    
                
    }
}

//connection IbE
for i=pc.id+ncell*21+nIP+nMN+nAff+nInt, ncell*21+nIP+nMN+nAff+2*nInt -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nAff)
        connectionSTDP(target.synlistaff.object(j), connect_Ibe_Ia, i, (ncell*21+nIP+nMN+nAff+2*nInt+nRC+nSens + r.repick()), stdpmech, presyns, postsyns, 0, 1)
    }
}

//connection RCE
for i=pc.id+ncell*21+nIP+nMN+nAff+2*nInt, ncell*21+nIP+nMN+nAff+2*nInt+nRC -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nMN)
        connectionSTDP(target.synlistmn.object(j), connect_RCe_MNe, i, (ncell*21+nIP+r.repick()), stdpmech, presyns, postsyns, 0, 1)
    
    }
}

//connection Ia Afferent
for i=pc.id+ncell*21+nIP+nMN+nAff+2*nInt+nRC+nSens, ncell*21+nIP+nMN+nAff+2*nInt+nRC+nSens+nAff -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nAff)
        connection(target.synlistsens.object(j), connect_sens1_EES, ncells)
        if(i%20 == 0, 1){connection(target.synlistgen.object(j), connect_sens1_EES, (ncell*21+nIP+nMN + r.repick()))}
    }
}

*/
//connection sens
for i=pc.id+ncell*32+nIP+nMN, ncell*32+nIP+nMN+nSens -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        connection(target.synlistsens.object(j), connect_sens1_EES, ncells)
        //if(i%30 == 0, 1){connection(target.synlistgen.object(j), connect_sens1_EES, ncells+1)}
    }
}

