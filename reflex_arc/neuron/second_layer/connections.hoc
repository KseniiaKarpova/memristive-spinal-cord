objref connect_inh_inh, connect_ex_ex, connect_ex_inh, connect_inh_ex
objref connect_ip_ex, connect_ex_ees, connect_ip_ees

objref syn, target, stdp, presyn, postsyn, stdpmech, presyns, postsyns

objref connect_MNe_Aff, connect_MNe_IA, connect_MNe_Ib
objref connect_IAe_Ia, connect_Ibe_Ia, connect_sens1_EES
objref connect_IP0_sens1, connect_IP0_MNe, connect_IP0_IAe
objref connect_MNe_RCe, connect_IAe_RCe, connect_RCe_MNe

connect_MNe_Aff = new List()
connect_MNe_Ib = new List()
connect_MNe_IA = new List()
connect_IAe_Ia = new List()
connect_Ibe_Ia = new List()
connect_sens1_EES = new List()
connect_IP0_sens1 = new List()
connect_IP0_MNe = new List()
connect_IP0_IAe = new List()
connect_MNe_RCe = new List()
connect_IAe_RCe = new List()
connect_RCe_MNe = new List()

connect_inh_inh = new List()
connect_ex_ex = new List()
connect_ex_inh = new List()
connect_inh_ex = new List()
connect_ip_ex = new List()
connect_ex_ees = new List()
connect_ip_ees = new List()

presyns = new List()
postsyns = new List()
stdpmech = new List()


proc connection(){
    syn = $o1
    nc = pc.gid_connect($3, syn)
	r.uniform(1, 2)
    nc.weight = r.repick()
    r.uniform(1, 2)
    nc.delay = r.repick()
    $o2.append(nc)
}

proc connectionSTDP(){
	r.uniform(0.01, 0.02)
    syn = $o1
    nc = pc.gid_connect($4, syn)
    nc.weight = r.repick()
    nc.delay = 1
    stdp = new StdwaSA(0.5)
    $o2.append(nc)
    if($8 == 1){
        stdp.aLTD = -0.001//inhibitory
        nc.weight = 0.085
        //nc.delay = 2
    }else if($8 == 2){
        nc.weight = 0.015
        nc.delay = 3
    }else{nc.weight = 0.05}
    presyn = pc.gid_connect($4, stdp)
    presyn.weight = 1
    postsyn = pc.gid_connect($3, stdp)
    postsyn.weight = -1
    setpointer stdp.wsyn, $o2.object($o2.count-1).weight
    $o5.append(stdp)
    $o6.append(presyn)
    $o7.append(postsyn)
}

//connection excitatory
for i=pc.id, 12*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn-1 {
        r.uniform(0, nSens)
    	if (i < 20){
            connection(target.synlistees.object(j), connect_ex_ees, (ncell*12+nIP+nMN+r.repick())) //add ees
            connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i+120), stdpmech, presyns, postsyns, 0)
        } 
    	if (i >= 20 && i < 120){
    		connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-20), stdpmech, presyns, postsyns, 0)
            connectionSTDP(target.synlistees.object(j), connect_ex_ex, i, (i+120), stdpmech, presyns, postsyns, 0)
        }
    	if (i >= 120 && i < 240){
    		connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-120), stdpmech, presyns, postsyns, 0)
    	}
        if (i >= 120 && i < 220){
            connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (i - 100), stdpmech, presyns, postsyns, 1)
        }
	}
}

/*

//connection inhibitory
for i=pc.id+6*ncell, 12*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn-1 {
        if((i - 6*ncell) < 20){
            connectionSTDP(target.synlistex.object(j), connect_inh_inh, i, (i - 140), stdpmech, presyns, postsyns, 0)
        }else if (i >= 260 && i < 280){
            connectionSTDP(target.synlistex.object(j), connect_inh_inh, i, 369, stdpmech, presyns, postsyns, 0)
        }else if (i >= 280 && i < 300){
            connectionSTDP(target.synlistex.object(j), connect_inh_inh, i, 379, stdpmech, presyns, postsyns, 0)
        }else if (i >= 300 && i < 320){
            connectionSTDP(target.synlistex.object(j), connect_inh_inh, i, 389, stdpmech, presyns, postsyns, 0)
        }else if (i >= 320 && i < 340){
            connectionSTDP(target.synlistex.object(j), connect_inh_inh, i, 399, stdpmech, presyns, postsyns, 0)
        }else{
            connectionSTDP(target.synlistex.object(j), connect_inh_inh, i, 409, stdpmech, presyns, postsyns, 0)
        }
    }
}

//connection hidden neurons
for i=pc.id+18*ncell, 21*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*10-1 {
        if(i == 18*ncell){
            connection(target.synlistex.object(j), connect_inh_ex, (240 + j))
        }else if(i == 370){
            connection(target.synlistex.object(j), connect_inh_ex, (260 + j))
        }else if(i == 380){
            connection(target.synlistex.object(j), connect_inh_ex, (280 + j))
        }else if(i == 390){
            connection(target.synlistex.object(j), connect_inh_ex, (300 + j))
        }else if(i == 400){
            connection(target.synlistex.object(j), connect_inh_ex, (320 + j))
        }else{
            connection(target.synlistex.object(j), connect_inh_ex, (i - 1))
        }
    }
}

/*
//connection hidden neurons
for i=pc.id+18*ncell, 21*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    r.uniform(0, 5)
    for j = 0,nsyn*10-1 {
        if(i == 18*ncell && i < 365){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (240 + j), stdpmech, presyns, postsyns, 0)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 370 && i < 375){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (260 + j), stdpmech, presyns, postsyns, 0)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 380 && i < 385){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (280 + j), stdpmech, presyns, postsyns, 0)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 390 && i < 395){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (300 + j), stdpmech, presyns, postsyns, 0)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 400 && i < 405){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (320 + j), stdpmech, presyns, postsyns, 0)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 365 && i < 370){connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i - r.repick()), stdpmech, presyns, postsyns, 2)}
        if(i == 375 && i < 380){connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i - r.repick()), stdpmech, presyns, postsyns, 2)}
        if(i == 385 && i < 390){connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i - r.repick()), stdpmech, presyns, postsyns, 2)}
        if(i == 395 && i < 400){connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i - r.repick()), stdpmech, presyns, postsyns, 2)}
        if(i == 405 && i < 410){connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (i - r.repick()), stdpmech, presyns, postsyns, 2)}
        if(i == 410){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (360 + r.repick()), stdpmech, presyns, postsyns, 2)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (365 + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 411){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (370 + r.repick()), stdpmech, presyns, postsyns, 2)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (375 + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 412){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (380 + r.repick()), stdpmech, presyns, postsyns, 2)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (385 + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 413){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (390 + r.repick()), stdpmech, presyns, postsyns, 2)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (395 + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 414){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (400 + r.repick()), stdpmech, presyns, postsyns, 2)
            connectionSTDP(target.synlistees.object(j), connect_inh_ex, i, (405 + r.repick()), stdpmech, presyns, postsyns, 2)
        }
        if(i == 415){connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (410), stdpmech, presyns, postsyns, 2)}
        if(i == 416){connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (411), stdpmech, presyns, postsyns, 2)}
        if(i == 417){connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (412), stdpmech, presyns, postsyns, 2)}
        if(i == 418){connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (413), stdpmech, presyns, postsyns, 2)}
        if(i == 419){connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (414), stdpmech, presyns, postsyns, 2)}
    
    }
}
*/
//connection IP
for i=pc.id+12*ncell, ncell*12+nIP -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    r.uniform(0, 20)
    for j = 0,nsyn*30-1 {
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (120 + int(j/10)*20 + r.repick()), stdpmech, presyns, postsyns, 0)
        //r.uniform(0, nSens)
        //connection(target.synlistex.object(j), connect_ip_ees, (ncell*21+nIP+nMN+nAff+2*nInt+nRC+r.repick()))
    }
}

//connection MNE
for i=pc.id+ncell*12+nIP, ncell*12+nIP+nMN -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nIP)
        connectionSTDP(target.synlistip.object(j), connect_IP0_MNe, i, (12*ncell + r.repick()), stdpmech, presyns, postsyns, 0)
        r.uniform(0, nSens)
        connectionSTDP(target.synlistaff.object(j), connect_MNe_Aff, i, (ncell*12+nIP+nMN+r.repick()), stdpmech, presyns, postsyns, 0)
        //r.uniform(0, nInt)
        //connectionSTDP(target.synlistinh.object(j), connect_MNe_IA, i, (ncell*21+nIP+nMN+nAff + r.repick()), stdpmech, presyns, postsyns, 1)        
        //r.uniform(0, nInt)
        //connectionSTDP(target.synlistex.object(j), connect_MNe_Ib, i, (ncell*21+nIP+nMN+nAff+nInt + r.repick()), stdpmech, presyns, postsyns, 1)        
        //r.uniform(0, nRC)
        //connectionSTDP(target.synlistrc.object(j), connect_MNe_RCe, i, (ncell*21+nIP+nMN+nAff+2*nInt + r.repick()), stdpmech, presyns, postsyns, 1)              
    
    }
}
/*
//connection IaE
for i=pc.id+ncell*21+nIP+nMN+nAff, ncell*21+nIP+nMN+nAff+nInt -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nIP)
        connectionSTDP(target.synlistip.object(j), connect_IP0_IAe, i, (21*ncell + r.repick()), stdpmech, presyns, postsyns, 0)
        r.uniform(0, nAff)
        connectionSTDP(target.synlistaff.object(j), connect_IAe_Ia, i, (ncell*21+nIP+nMN+nAff+2*nInt+nRC+nSens + r.repick()), stdpmech, presyns, postsyns, 0)
        r.uniform(0, nRC)
        connectionSTDP(target.synlistrc.object(j), connect_IAe_RCe, i, (ncell*21+nIP+nMN+nAff+2*nInt + r.repick()), stdpmech, presyns, postsyns, 1)              
    
                
    }
}

//connection IbE
for i=pc.id+ncell*21+nIP+nMN+nAff+nInt, ncell*21+nIP+nMN+nAff+2*nInt -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nAff)
        connectionSTDP(target.synlistaff.object(j), connect_Ibe_Ia, i, (ncell*21+nIP+nMN+nAff+2*nInt+nRC+nSens + r.repick()), stdpmech, presyns, postsyns, 0)
    }
}

//connection RCE
for i=pc.id+ncell*21+nIP+nMN+nAff+2*nInt, ncell*21+nIP+nMN+nAff+2*nInt+nRC -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nMN)
        connectionSTDP(target.synlistmn.object(j), connect_RCe_MNe, i, (ncell*21+nIP+r.repick()), stdpmech, presyns, postsyns, 0)
    
    }
}

//connection Ia Afferent
for i=pc.id+ncell*21+nIP+nMN+nAff+2*nInt+nRC+nSens, ncell*21+nIP+nMN+nAff+2*nInt+nRC+nSens+nAff -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        r.uniform(0, nAff)
        connection(target.synlistsens.object(j), connect_sens1_EES, ncells)
        if(i%20 == 0){connection(target.synlistgen.object(j), connect_sens1_EES, (ncell*21+nIP+nMN + r.repick()))}
    }
}

*/
//connection sens
for i=pc.id+ncell*12+nIP+nMN, ncell*12+nIP+nMN+nSens -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*50-1 {
        connection(target.synlistsens.object(j), connect_sens1_EES, ncells)
        //if(i%30 == 0){connection(target.synlistgen.object(j), connect_sens1_EES, ncells+1)}
    }
}

