load_file("nrngui.hoc")
ncell = 20       /* The number of cells */
ncells = 20*26
nsyn = 2

{load_file("EES.hoc")}
{load_file("ex.hoc")}
{load_file("inh.hoc")}
{load_file("ip.hoc")}
{load_file("MNE.hoc")}
{load_file("Ia.hoc")}
{load_file("IaintE.hoc")}
{load_file("RCE.hoc")}

objref cells, nil, nc
cells = new List()

objref pc, r
pc = new ParallelContext()

proc addcell(){
    cells.append($o1)
    pc.set_gid2node($2, $3)
    nc = cells.object(cells.count()-1).connect2target(nil)
    pc.cell($2, nc)
}

for (i=pc.id; i < ncell*12; i += pc.nhost){
    addcell(new Ex(i), i, pc.id)
}

for (i=pc.id+ncell*12; i < ncell*21; i += pc.nhost){
    addcell(new Inh((i - ncell)*2), i, pc.id)
}

for (i=pc.id+ncell*21; i < ncell*22; i += pc.nhost){
    addcell(new IP0(i - 21*ncell), i, pc.id)
}

for (i=pc.id+ncell*22; i < ncell*23; i += pc.nhost){
    addcell(new MNE(i - 22*ncell), i, pc.id)
}

for (i=pc.id+ncell*23; i < ncell*24; i += pc.nhost){
    addcell(new Ia(), i, pc.id)
}

for (i=pc.id+ncell*24; i < ncell*25; i += pc.nhost){
    addcell(new IaE(i - 24*ncell), i, pc.id)
}

for (i=pc.id+ncell*25; i < ncell*26; i += pc.nhost){
    addcell(new RCE(i - 25*ncell), i, pc.id)
}

//add EES
if (pc.id == 0) {
    {addcell(new EES(), ncells, pc.id)}
}

objref connect_inh_inh, connect_ex_ex, connect_ex_inh, connect_inh_ex
objref connect_ip_ex, connect_ex_ees, connect_inh_ees
objref syn, target, stdp, presyn, postsyn, stdpmech, presyns, postsyns

connect_inh_inh = new List()
connect_ex_ex = new List()
connect_ex_inh = new List()
connect_inh_ex = new List()
connect_ip_ex = new List()
connect_ex_ees = new List()
connect_inh_ees = new List()
presyns = new List()
postsyns = new List()
stdpmech = new List()
r = new Random()


proc connection(){
    syn = $o1
    nc = pc.gid_connect($3, syn)
	r.uniform(1, 2)
    nc.weight = r.repick()
    r.uniform(1, 2)
    nc.delay = r.repick()
    $o2.append(nc)
}

proc connectionSTDP(){
	r.uniform(0.005, 0.007)
    syn = $o1
    nc = pc.gid_connect($4, syn)
    nc.weight = r.repick()
    nc.delay = 1
    stdp = new StdwaSA(0.5)
    $o2.append(nc)
    if($8){
        stdp.aLTD = -0.001//inhibitory
        //nc.weight = 0.08
    }else{nc.weight = 0.07}
    presyn = pc.gid_connect($4, stdp)
    presyn.weight = 1
    postsyn = pc.gid_connect($3, stdp)
    postsyn.weight = -1
    setpointer stdp.wsyn, $o2.object($o2.count-1).weight
    $o5.append(stdp)
    $o6.append(presyn)
    $o7.append(postsyn)
}

//connection excitatory
for i=pc.id, 12*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn-1 {
    	f=1
    	if (i < 20){connection(target.synlistees.object(j), connect_ex_ees, ncells)} //add ees
    	if (i >= 20 && i < 120){
    		connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-20), stdpmech, presyns, postsyns, 0)
            //connectionSTDP(target.synlistees.object(j), connect_ex_ex, i, (i+100), stdpmech, presyns, postsyns, 0)
    	}
    	if (i >= 120 && i < 240){
    		connectionSTDP(target.synlistex.object(j), connect_ex_ex, i, (i-120), stdpmech, presyns, postsyns, 0)
    		connectionSTDP(target.synlistinh.object(j), connect_ex_inh, i, (i + 120), stdpmech, presyns, postsyns, 0)
    	}
	}
}

//connection inhibitory
for i=pc.id+12*ncell, 18*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn-1 {
        if((i - 12*ncell) < 20){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (i - 140), stdpmech, presyns, postsyns, 0)
        }else if (i >= 260 && i < 280){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, 369, stdpmech, presyns, postsyns, 0)
        }else if (i >= 280 && i < 300){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, 379, stdpmech, presyns, postsyns, 0)
        }else if (i >= 300 && i < 320){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, 389, stdpmech, presyns, postsyns, 0)
        }else if (i >= 320 && i < 340){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, 399, stdpmech, presyns, postsyns, 0)
        }else{
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, 409, stdpmech, presyns, postsyns, 0)
        }
        //f=0
        //if (nsyn > 10){f = 1}
        //connectionSTDP(target.synlistinh.object(j), connect_inh_inh, i, i, stdpmech, presyns, postsyns, f)        
    }
}

//connection hidden neurons
for i=pc.id+18*ncell, 21*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*10-1 {
        if(i == 18*ncell){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (240 + j), stdpmech, presyns, postsyns, 0)
        }else if(i == 370){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (260 + j), stdpmech, presyns, postsyns, 0)
        }else if(i == 380){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (280 + j), stdpmech, presyns, postsyns, 0)
        }else if(i == 390){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (300 + j), stdpmech, presyns, postsyns, 0)
        }else if(i == 400){
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (320 + j), stdpmech, presyns, postsyns, 0)
        }else{
            connectionSTDP(target.synlistex.object(j), connect_inh_ex, i, (i - 1), stdpmech, presyns, postsyns, 0)
        }
        //f=0
        //if (nsyn > 10){f = 1}
        //connectionSTDP(target.synlistinh.object(j), connect_inh_inh, i, i, stdpmech, presyns, postsyns, f)        
    }
}

//connection IP
for i=pc.id+21*ncell, 22*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    r.uniform(0, 20)
    for j = 0,nsyn*30-1 {
        connectionSTDP(target.synlistex.object(j), connect_ip_ex, i, (i - 300 + int(j/10)*20 + r.repick()), stdpmech, presyns, postsyns, 0)
        connection(target.synlistex.object(j), connect_ip_ex, ncells)
    }
}

//connection MNE
for i=pc.id+22*ncell, 23*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    r.uniform(0, 20)
    for j = 0,nsyn*30-1 {
        connectionSTDP(target.synlistip.object(j), connect_ip_ex, i, (21*ncell + r.repick()), stdpmech, presyns, postsyns, 0)
        connectionSTDP(target.synlistaff.object(j), connect_ip_ex, i, (i + ncell), stdpmech, presyns, postsyns, 1)
        connectionSTDP(target.synlistinh.object(j), connect_ip_ex, i, (i + 2*ncell), stdpmech, presyns, postsyns, 1)        
        connectionSTDP(target.synlistrc.object(j), connect_ip_ex, i, (i + 3*ncell), stdpmech, presyns, postsyns, 1)              
    
    }
}

//connection IaE
for i=pc.id+24*ncell, 25*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*10-1 {
        connectionSTDP(target.synlistaff.object(j), connect_ip_ex, i, (i - ncell), stdpmech, presyns, postsyns, 0)
        connectionSTDP(target.synlistip.object(j), connect_ip_ex, i, (i - 3*ncell), stdpmech, presyns, postsyns, 0)          
        connectionSTDP(target.synlistrc.object(j), connect_ip_ex, i, (i + ncell), stdpmech, presyns, postsyns, 1)              
    }
}

//connection RCE
for i=pc.id+25*ncell, 26*ncell -1 {
    if (!pc.gid_exists(i)) { continue }
    target = pc.gid2cell(i) //target cell
    for j = 0,nsyn*10-1 {
        connectionSTDP(target.synlistmn.object(j), connect_ip_ex, i, (i - 3*ncell), stdpmech, presyns, postsyns, 0)
    
    }
}


objref vol[ncell]

for i=0, 20 - 1{
    vol[i] = new Vector()
    vol[i].record(&MNE[i].soma.v( 0.5 ))
}

tstop=200

{load_file("3.ses")}
run()

objref fok
fok=new File()
for i=0, 20 - 1{
    strdef basename0, extension, filename0
    basename0 = "./res/volM"
    extension = "txt"
    sprint(filename0, "%sn%d.%s", basename0, i, extension)
    fok.wopen(filename0)
    vol[i].printf(fok)
    fok.close()
}



