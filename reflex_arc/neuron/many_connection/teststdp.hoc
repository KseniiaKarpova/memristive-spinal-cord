nMN = 2       /* The number of cells */
nInt = 2
nAff = 2
nsyn = 10

{load_file("Ib1.hoc")}
{load_file("Ib2.hoc")}
{load_file("IIint1.hoc")}
{load_file("IIint2.hoc")}
{load_file("MNE.hoc")}
{load_file("MNF.hoc")}
{load_file("save.hoc")}

objectvar precellsIIe[nInt], MNe[nMN], precellsIAe[nInt]
objectvar precellsIIf[nInt], MNf[nMN], precellsIAf[nInt]
objectvar IaE[nAff], IbE[nAff], IaF[nAff], IbF[nAff]
objectvar spgenIaEx[nAff], spgenIbEx[nAff], spgenIaFl[nAff], spgenIbFl[nAff]
objectvar exsyn[nMN][nsyn], exstdpmech[nMN][nsyn], expresyn[nMN][nsyn], expostsyn[nMN][nsyn]
objectvar inhsyn[nMN][nsyn], inhstdpmech[nMN][nsyn], inhpresyn[nMN][nsyn], inhpostsyn[nMN][nsyn]
objectvar exsyn1[nMN][nsyn], exstdpmech1[nMN][nsyn], expresyn1[nMN][nsyn], expostsyn1[nMN][nsyn]
objectvar inhsyn1[nMN][nsyn], inhstdpmech1[nMN][nsyn], inhpresyn1[nMN][nsyn], inhpostsyn1[nMN][nsyn]
objectvar affsynMNe[nMN][nsyn], affsynMNf[nMN][nsyn]
objectvar mutualinhsynE[nInt][nsyn], mutualinhstdpmechE[nInt][nsyn], mutualinhpresynE[nInt][nsyn], mutualinhpostsynE[nInt][nsyn]
objectvar mutualinhsynF[nInt][nsyn], mutualinhstdpmechF[nInt][nsyn], mutualinhpresynF[nInt][nsyn], mutualinhpostsynF[nInt][nsyn]
objectvar affsynIAe[nInt][nsyn], affsynIAf[nInt][nsyn], affsynIAe1[nInt][nsyn], affsynIAf1[nInt][nsyn], affsynIIe[nInt][nsyn], affsynIIf[nInt][nsyn]
/* building arc */

for i = 0, nMN-1 { 
    MNe[i] = new MNE(i*5)
    MNf[i] = new MNF(i*5)
}

for i = 0, nInt-1 { 
    precellsIIe[i] = new II1(i)
    precellsIIf[i] = new II2(i)
}

for i = 0, nAff-1 { 
    IbE[i] = new Ib1(i)
    IbF[i] = new Ib2(i)
}

/* add spike generators on afferents */

for i = 0, nAff-1 { //spike generator
    spgenIbEx[i] = new SpikeGenerator(0.8)
        spgenIbEx[i].freq = 85
        spgenIbEx[i].start = 5
        spgenIbEx[i].number = 1000000
        spgenIbEx[i].noise = 0.2 
    spgenIbFl[i] = new SpikeGenerator(0.8)
        spgenIbFl[i].freq = 80
        spgenIbFl[i].start = 5
        spgenIbFl[i].number = 1000000
        spgenIbFl[i].noise = 0.2 
}

/* connection between motoneurons and interneurons, motoneurons and afferents */
objref r
r = new Random()

for i = 0,nMN-1 {
    for j = 0,nsyn-1 {
        nd = 1
        precellsIIe[i].axon exsyn[i][j] = new NetCon(&v(0), MNe[i].synlistex.object(j), 10, 1, 0.1)
        exstdpmech[i][j] = new StdwaSoft(0.8)
        precellsIIe[i].axon expresyn[i][j] = new NetCon(&v(0), exstdpmech[i][j], 10, 1, 1)
        MNe[i].dend[nd] expostsyn[i][j] = new NetCon(&v(0), exstdpmech[i][j], 10, 1, -1)
        setpointer exstdpmech[i][j].wsyn, exsyn[i][j].weight
        exstdpmech[i][j].gv = r.normal(0, .015)
        //inhstdpmech[i][j].antiwt = 0.01
        precellsIIf[i].axon exsyn1[i][j] = new NetCon(&v(0), MNe[i].synlistex.object(j), 10, 1, 0.1)
        exstdpmech1[i][j] = new StdwaSoft(0.8)
        precellsIIf[i].axon expresyn1[i][j] = new NetCon(&v(0), exstdpmech1[i][j], 10, 1, 1)
        MNf[i].dend[nd] expostsyn1[i][j] = new NetCon(&v(0), exstdpmech1[i][j], 10, 1, -1)
        setpointer exstdpmech1[i][j].wsyn, exsyn1[i][j].weight
        exstdpmech1[i][j].gv = r.normal(0, .015)
        //inhstdpmech1[i][j].antiwt = 0.01
        IbE[0].axon affsynIIe[i][j] = new NetCon(spgenIbEx[0], precellsIIe[i].synlistaff.object(j), -20, 1, 1)
        IbF[0].axon affsynIIf[i][j] = new NetCon(spgenIbFl[0], precellsIIf[i].synlistaff.object(j), -20, 1, 1)      
    }
}

//recording will be here

/*
objref exsynrec[nMN][nsyn], inhsynrec[nMN][nsyn]
recDt = 25
for i = 0,nMN-1 {
    for j = 0,nsyn-1 {
        exsynrec[i][j]= new Vector()
        exsynrec[i][j].record(&exsyn[i][j].weight, recDt) 
        inhsynrec[i][j]= new Vector()
        inhsynrec[i][j].record(&inhsyn[i][j].weight, recDt)
    }
}

tstop = 7000
v_init = -70
run()

objref fok
fok=new File()


for i = 0,nMN-1 {
    for j = 0,nsyn-1 {
        strdef basename0, basename1, extension, filename0, filename1
        basename0 = "./res/ex"
        basename1 = "./res/inh"
        extension = "txt"

        sprint(filename0, "%s%dn%d.%s", basename0, i, j, extension)
        fok.wopen(filename0)
        exsynrec[i][j].printf(fok)
        fok.close()

        sprint(filename1, "%s%dn%d.%s", basename1, i, j, extension)
        fok.wopen(filename1)
        inhsynrec[i][j].printf(fok)
        fok.close()
    }
}*/

forall psection()
